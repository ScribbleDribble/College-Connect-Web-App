CW2 Ideas


Password hashing and login
https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-v-user-logins
Use of hashing
- Store hash in db and when user logs in, use check_password_hash function and see if it returns true. So we dont need to store original password.
-- this is how secure logins work

For report:
The passwords are first hashed using a hash function and the result is then stored in the database. After this point, the hashed passwords cannot be inversed to retrieve the initial password.    


Security (Must do)
Sensitive data exposure
Data whether in transit or persisted to disk should be stored securely. In particular sensitive data such as passwords, credit card information and anything covered by the Data Protection act.

Mitigation
Use cryptographic systems to provide secure storage and transit security. For transit this should include using HTTPS rather than HTTP and for storage using suitable encryption technologies integrated into the chosen database system.

Possible uses of celery
- Allowing users to send a message to two users in one submit. All jobs to be performed asynchronously. A word limit counter that decreses with each word inputted in the field (simpler approach?).  

Possible use of AJAX
- Like counter. A nice example has already been provided.
- Sending occasional pull requests to the server to notify the user if the user has received a message 
 

Login system (Must do)
Upload image(Must do)

Concerns
Not signing up anyone under a certain age?
At risk of COPA/equivalent fines if we do regarding the holding and processing of data of minors

Security Concern
Bots. Include captcha in sign up. Use google's API.

Messaging system 
- We need a table for each user containing all the messages they have received.
- from the modelling of the ER diagram, we can form a view of the messages sent and received.


Improvements for CW2
- Let users know when they cannot submit a form
- Ease work for the controller. Use SQLAlechmy commands in view.py to filter data. It is more efficient this way
- DB autoincrements itself, no need to do anything in controller. Also an inefficient method.
- Go more indepth on the report (6 pages worth of words)
- Remember to use constraints when defining model.
-- When exploring topics (security, testing etc) talk about the bigger picture, talking about the importance of it, common cases. Maybe even relate it to your web application
-- I mean it, go real in-depth on security and stuff mentioned in the markscheme 
- When writing code, think about the possible designers reading it.



references:

user profile pic image 
https://pixabay.com/vectors/blank-profile-picture-mystery-man-973460/
